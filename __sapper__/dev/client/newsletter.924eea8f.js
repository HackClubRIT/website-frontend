import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as space, c as create_component, q as query_selector_all, f as detach_dev, g as claim_space, l as claim_component, o as insert_dev, r as mount_component, w as transition_in, x as transition_out, y as destroy_component } from './client.9d7c3be9.js';
import { H as Header } from './Header.f9a47f00.js';

/* src/routes/newsletter.svelte generated by Svelte v3.37.0 */

function create_fragment(ctx) {
	let t;
	let header;
	let current;

	header = new Header({
			props: {
				title: /*title*/ ctx[0],
				description: /*description*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = space();
			create_component(header.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1u2bzhs\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(header.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Newsletter";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(header, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};
			if (dirty & /*title*/ 1) header_changes.title = /*title*/ ctx[0];
			if (dirty & /*description*/ 2) header_changes.description = /*description*/ ctx[1];
			header.$set(header_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(header, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Newsletter", slots, []);
	let { title = "Hack Club RITâ€™s Newsletter" } = $$props;
	let { description = "A monthly update of what is happening around us." } = $$props;
	const writable_props = ["title", "description"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Newsletter> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("description" in $$props) $$invalidate(1, description = $$props.description);
	};

	$$self.$capture_state = () => ({ Header, title, description });

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("description" in $$props) $$invalidate(1, description = $$props.description);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title, description];
}

class Newsletter extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, description: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Newsletter",
			options,
			id: create_fragment.name
		});
	}

	get title() {
		throw new Error("<Newsletter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Newsletter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get description() {
		throw new Error("<Newsletter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set description(value) {
		throw new Error("<Newsletter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Newsletter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3c2xldHRlci45MjRlZWE4Zi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9uZXdzbGV0dGVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgSGVhZGVyIGZyb20gXCIuLi9jb21wb25lbnRzL0hlYWRlci5zdmVsdGVcIjtcblxuICBleHBvcnQgbGV0IHRpdGxlID0gXCJIYWNrIENsdWIgUklU4oCZcyBOZXdzbGV0dGVyXCI7XG4gIGV4cG9ydCBsZXQgZGVzY3JpcHRpb24gPSBcIkEgbW9udGhseSB1cGRhdGUgb2Ygd2hhdCBpcyBoYXBwZW5pbmcgYXJvdW5kIHVzLlwiO1xuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPk5ld3NsZXR0ZXI8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPEhlYWRlciB7dGl0bGV9IHtkZXNjcmlwdGlvbn0gLz5cblxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FHYSxLQUFLLEdBQUcsNEJBQTRCO09BQ3BDLFdBQVcsR0FBRyxrREFBa0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
